`````
类数组转数组的方法：

var arrayLike = {0: 'name', 1: 'age', 2: 'sex', length: 3 }
// 1. slice
Array.prototype.slice.call(arrayLike); // ["name", "age", "sex"] 
// 2. splice
Array.prototype.splice.call(arrayLike, 0); // ["name", "age", "sex"] 
// 3. ES6 Array.from
Array.from(arrayLike); // ["name", "age", "sex"] 
// 4. apply
Array.prototype.concat.apply([], arrayLike)


Arguments对象的length属性，表示实参的长度，举个例子：
function foo(b, c, d){
    console.log("实参的长度为：" + arguments.length)
}
console.log("形参的长度为：" + foo.length)
foo(1)
// 形参的长度为：3
// 实参的长度为：1

`````

`````````
我知道的是：this一般有几种调用场景
var obj = {a: 1, b: function(){console.log(this);}}
1、作为对象调用时，指向该对象 obj.b(); // 指向obj
2、作为函数调用, var b = obj.b; b(); // 指向全局window
3、作为构造函数调用 var b = new Fun(); // this指向当前实例对象
4、作为call与apply调用 obj.b.apply(object, []); // this指向当前的object

`````````

1、一个数组 par 中存放有多个人员的信息，如{age: 2, name: 'xx'}。
请写一段 JS 程序，对这个数组按年龄从小到大进行排序。

function parSort(par) {
    return par.sort(function(arr1, arr2) {
        return arr1.age > arr2.age ? -1 : 1;
    });
}

2、有字符串 var = 'abc345efgabcab'，请写出 3 条 JS 语句分别实现如下 3 个功能：
1）去掉字符串中的a、b、c 字符，形成结果：'345efg'
2）将字符串中的数字用中括号括起来，形成结果：'abc3[5]efgabcab'
3）将字符串中的每个数字的值分别乘以 2，形成结果：'abc6810efgabcab'
str.replace(/([a-c])/g, '');
str.replace(/(\d)/g, '[$1]');
str.replace(/(\d)/g, function(num) {return num*2;});
匹配一个全部是数字的字符串  /^\d+$/.test(str);


function Person() {

}

var person = new Person();

console.log(person.__proto__ == Person.prototype) // true
console.log(Person.prototype.constructor == Person) // true
// 顺便学习一个ES5的方法,可以获得对象的原型
console.log(Object.getPrototypeOf(person) === Person.prototype) // true

                     
|-Person (构造函数) ----prototype-----> Person.prototype(实例原型)-|
|        ⬆︎                                 |      |      |
|        |<-------constructor --------------|      |      |
|                                                  |      |
|                                                  |      |
|---person(实例)-------------__proto__------------->|      |__proto__
                                                          |
                                                          |
Object()-------prototype-------> Object.prototype <-------|
     ⬆︎                                 |  |
     ^<--------constructor--------------|  |__proto__
                                           |
                                           ⬇︎
                                          null               
